class Solution {
public:
    int evalRPN(vector<string>& tokens) {
         stack<int>s;
         int n=tokens.size();
         for(int i=0;i<n;i++)
         {
             if(tokens[i]=="/")
             {
                  if(!s.empty())
                {
                    int x=s.top();
                    int y=1;
                    s.pop();
                     if(!s.empty())
                     {
                        y=s.top();
                       s.pop();  
                     }
                     s.push(y/x);
                
                }
             }
             else if(tokens[i]=="+")
             {
                     if(!s.empty())
                {
                    int x=s.top();
                    s.pop();
                     if(!s.empty())
                     {
                       int y=s.top();
                       s.pop();
                         s.push(x+y);  
                     }
                   
                
                }
             }
             else if(tokens[i]=="*")
             {
                   if(!s.empty())
                {
                    int x=s.top();
                    s.pop();
                     if(!s.empty())
                     {
                       int y=s.top();
                       s.pop(); 
                        s.push(x*y); 
                     }
                    
                
                }
             }
             else if(tokens[i]=="-")
             {
                  if(!s.empty())
                {
                    int x=s.top();
                    s.pop();
                     if(!s.empty())
                     {
                       int y=s.top();
                       s.pop(); 
                        s.push(y-x); 
                     }
                    
                
                }
             }
             else
             {
              int x=stoi(tokens[i]);
              s.push(x);
                
             }
         }
         return s.top(); 
    }
};
